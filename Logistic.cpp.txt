import java.io.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

// Logistic Regression 
public class Logistic {

	/** the learning rate */
	private double rate;

	/** the weight to learn */
	private double[] weights;

	/** the number of iterations */
	private int ITERATIONS = 2000;

	public Logistic(int n) {		
		this.rate = 0.0001;				// Eeta (Learning Rate)
		weights = new double[n];		// Optimum weights for correct classifications
	}

	private static double sigmoid(double z) {		// Sigmoid function
		return  (1.0 / (1.0 + Math.exp(-z)));
	}

	/* Get the x1...4 values of all 912 training data*/
	/* Update the Weight vectors including bias, W0 by the corresponding errors and run this training for 1000 times*/
	public void train(List<Instance> instances) {
		for (int n=0; n<ITERATIONS; n++) {
			for (int i=0; i<instances.size(); i++) {
				double[] x = instances.get(i).x;
				double predicted = classify(x);		// yn is predicted
				int label = instances.get(i).label;	// tn is label
				for (int j=0; j<weights.length; j++) {
					weights[j] = weights[j] - rate * (predicted - label) * x[j];
				}
				//E(w)= label * Math.log(classify(x)) + (1-label) * Math.log(1- classify(x));
				// After simplying, VE = (yi - ti) * x[i];
			}

		}
	}
	private int classify(double[] x) {
		double logit = .0;
		for (int i=0; i<weights.length;i++)  {
			logit += weights[i] * x[i];
		}
		if(sigmoid(logit) >= 0.5)
			return 1;
		else return 0;

	}
	
	public void test(List<Instance> instances) {		//Test the data required
		int[] output= new int[instances.size()];
		int[] actual= new int[instances.size()];
		int[] confuse = new int[instances.size()];
		double tn=0;
		double tp=0;
		double fn=0;
		double fp=0;
		
		for(int i=0;i<instances.size();i++) {
			double[] x = instances.get(i).x;
			int predicted = classify(x);				//Predicted is our classification
			output[i] = predicted;
			actual[i] = instances.get(i).label;			// Actual is true classification
		}
			
			try(FileWriter f = new FileWriter("output.txt")){  	// Create a new file and write our predictions to it
				for(int j=0;j<instances.size();j++) {
					f.write(Integer.toString(output[j])+ "\n");
				}
				
			} catch(IOException e) {
				System.out.println("An IO Error has ocurred");
			}
			
			for(int k=0;k<instances.size();k++) {    // compute confuse array
				confuse[k] = output[k] - actual[k];
				if(confuse[k] ==0 && output[k]==0)
					tn++;
				else if(confuse[k] ==0 && output[k] ==1)
					tp++;
				else if(confuse[k] ==1)
					fp++;
				else if(confuse[k] ==-1)
					fn++;
			}
			System.out.println("Tn: " + tn + "\t Fp: " + fp + "\nFn: "+ fn + "\t\t Tp: " + tp);
			double accuracy = ((tn + tp)/(tn + tp + fn +fp)) * 100 ;
			System.out.println("\nAccuracy :\t " + accuracy);
			double precision = (tp / (tp + fp)) * 100;
			double recall = (tp / (tp + fn)) * 100 ;
			System.out.println("Precision : \t " + precision + "\nRecall : \t " + recall + "\n");
			
		
	}



	public static class Instance {
		public int label;
		public double[] x;

		public Instance(int label, double[] x) {
			this.label = label;
			this.x = x;
		}
	}

	public static List<Instance> readDataSet(String file) throws FileNotFoundException {
		List<Instance> dataset = new ArrayList<Instance>();
		Scanner scanner = null;
		try {
			scanner = new Scanner(new File(file));
			while(scanner.hasNextLine()) {
				String line = scanner.nextLine();

				String[] columns = line.split(",");

				// last column is the label
				int i;
				double[] data = new double[columns.length];
				data[0] = 1;
				for (i=1; i<columns.length; i++) {
					data[i] = Double.parseDouble(columns[i-1]);
				}
				int label = Integer.parseInt(columns[i-1]);
				Instance instance = new Instance(label, data);
				dataset.add(instance);
			}
		} finally {
			if (scanner != null)
				scanner.close();
		}
		return dataset;
	}


	

	public static void main(String... args) throws FileNotFoundException {
		List<Instance> instances = readDataSet("dataset.txt");
		Logistic logistic = new Logistic(5);
		logistic.train(instances);
		

		
		List<Instance> test_instances = readDataSet("test.txt");
		Logistic test_logistic = new Logistic(5);
		logistic.test(test_instances);
		for(int i=0;i<5;i++) {
			System.out.println("w" + i + ": \t"+ logistic.weights[i]);
		}
	}

}